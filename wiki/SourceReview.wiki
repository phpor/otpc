#summary One-sentence summary of this page.

= Introduction =

Add your content here.


= Details =

Add your content here.  Format your content with:
  * Text in *bold* or _italic_
  * Headings, paragraphs, and lists
  * Automatic links to other wiki pages

1.Token的初始化需要两次连续输入在客服端生成的OTP
  －－usability需要改进

2.工作流程
{{{
 main(main.c) 启动daemon 
  利用xpthread_create启动accept_thread(accept_thread.c)
  {
    accept socket;
    利用xpthread_create启动work_thread(work_thread.c);
    {
     read socket;
     调用OTP验证函数verify(otp.c);
     write socket;
    }
  } 
}}}
3.optauth.c
{{{
  利用socket通信，向daemon(OTPD)发送验证请求并接受OTPD的回复。
  验证请求用struct: otp_request_t
  回复用struct: otp_reply_t
}}}
4.main.c
{{{
 系统初始化
  config = config_init();
  cardops_init();
  sig_init();
}}}
5.state.c
{{{
  提供读写user的state文件用函数。利用lock.c里的函数来lock,unlock state文件。
  
  注:每个Token的状态以文件方式保存在服务器上。 
  # ls /etc/otpstate   
    Token001  Token002  Token003 
  # cat /etc/otpstate/Token001   
    5:Token001:0000000000000009:::0:4bea8f01:0:

  * 需要改进Token状态的存取方式。
}}}
6.lock.c
{{{
  用一个数组，里面包含64个链表来管理user的排他处理状态。利用username的hash值来决定
每个user应该在哪一个链表里管理。
  lock_get:从链表中取出指定用户的ulock_t
  lock_put:追加ulock_t到链表　　
}}}
7.otp.c
{{{
  系统最重要的文件，提供verify函数来验证Token。
}}}